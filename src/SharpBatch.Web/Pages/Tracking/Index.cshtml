@page
@using SharpBatch.Tracking.Abstraction
@inject SharpBatch.Tracking.Abstraction.ISharpBatchTracking trackingProvider
@inject SharpBatch.Web.Internals.IReportProvider reportProvider

@functions{
    [BindProperty]
    public (List<string> labels, List<(string serieName, List<int> data)> series)? chartData { get; set; }

    public IActionResult OnGet()
    {
        chartData = reportProvider.ChartWeekly();
        return Page();
    }
}

@section Breadcrumb{
    <ol class="breadcrumb">
        <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
        <li>Tracking</li>
    </ol>
}

    <div class="row">
        <SmallBox sb-smallbox-bgcolor="bg-aqua" sb-smallbox-icon="ion-play" sb-smallbox-url="/tracking/list/Running">
            <h3>@trackingProvider.GetByStatusCount(StatusEnum.Running)</h3>
            <p>Running Batch</p>
        </SmallBox>
        <SmallBox sb-smallbox-bgcolor="bg-aqua" sb-smallbox-icon="ion-checkmark-circled" sb-smallbox-url="/tracking/list/Stopped">
            <h3>@trackingProvider.GetByStatusCount(StatusEnum.Stopped)</h3>
            <p>Complete Batch</p>
        </SmallBox>
        <SmallBox sb-smallbox-bgcolor="bg-aqua" sb-smallbox-icon="ion-close-circled" sb-smallbox-url="/tracking/list/Error">
            <h3>@trackingProvider.GetByStatusCount(StatusEnum.Error)</h3>
            <p>Errors</p>
        </SmallBox>
    </div>
    <div class="row">
        @{
            var completedPercentage = reportProvider.CompletedPercentageToNow();
            var errorPercentage = reportProvider.ErrorPercentageToNow();
            var runningPercentage = reportProvider.RunningPercentageToNow();
        }
        <GraphKnob class="col-xs-6 col-md-3" sb-Knob-Value="@runningPercentage" sb-Knob-Width="180" sb-Knob-Height="180" sb-Knob-Thickness="0.2" sb-Knob-Title="Running @runningPercentage  %" sb-Knob-fgColor="#3c8dbc" sb-knob-angleOffset="-125" sb-knob-angleArc="250" sb-Knob-Skin="tron"></GraphKnob>
        <GraphKnob class="col-xs-6 col-md-3" sb-Knob-Value="@completedPercentage" sb-Knob-Width="180" sb-Knob-Height="180" sb-Knob-Thickness="0.2" sb-Knob-Title="Completed @completedPercentage  %" sb-Knob-fgColor="#3c8dbc" sb-knob-angleOffset="-125" sb-knob-angleArc="250" sb-Knob-Skin="tron"></GraphKnob>
        <GraphKnob class="col-xs-6 col-md-3" sb-Knob-Value="@errorPercentage" sb-Knob-Width="180" sb-Knob-Height="180" sb-Knob-Thickness="0.2" sb-Knob-Title="Error @errorPercentage  %" sb-Knob-fgColor="#3c8dbc" sb-knob-angleOffset="-125" sb-knob-angleArc="250" sb-Knob-Skin="tron"></GraphKnob>
    </div>
    <div class="row"></div>
    <div class="row">
        <div class="col-md-10">
            <div class="chart">
                <!-- Sales Chart Canvas -->
                <canvas id="salesChart" style="height: 180px;"></canvas>
            </div>
        </div>
    </div>


@section javascriptSection{
<script src="~/lib/adminlte/plugins/chartjs/Chart.min.js"></script>
<script language="javascript">
    $(function () {

        //-----------------------
        //- MONTHLY SALES CHART -
        //-----------------------

        // Get context with jQuery - using jQuery's .get() method.
        var salesChartCanvas = $("#salesChart").get(0).getContext("2d");
        // This will get the first returned node in the jQuery collection.
        var salesChart = new Chart(salesChartCanvas);

        var salesChartData = {
            labels: ["@Html.Raw(string.Join("\",\"", chartData.Value.labels))"],
            datasets: [
                {
                    label: "@Html.Raw(chartData.Value.series[0].serieName)",
                    fillColor: "rgb(210, 214, 222)",
                    strokeColor: "rgb(210, 214, 222)",
                    pointColor: "rgb(210, 214, 222)",
                    pointStrokeColor: "#c1c7d1",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgb(220,220,220)",
                    data: [@Html.Raw(string.Join(",", chartData.Value.series[0].data ))]
                },
                {
                    label: "@Html.Raw(chartData.Value.series[1].serieName)",
                    fillColor: "rgba(60,141,188,0.9)",
                    strokeColor: "rgba(60,141,188,0.8)",
                    pointColor: "#3b8bba",
                    pointStrokeColor: "rgba(60,141,188,1)",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(60,141,188,1)",
                    data: [@Html.Raw(string.Join(",", chartData.Value.series[1].data ))]
                }
            ]
        };

                        var salesChartOptions = {
            //Boolean - If we should show the scale at all
            showScale: true,
            //Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: false,
            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            //Boolean - Whether the line is curved between points
            bezierCurve: true,
            //Number - Tension of the bezier curve between points
            bezierCurveTension: 0.3,
            //Boolean - Whether to show a dot for each point
            pointDot: false,
            //Number - Radius of each point dot in pixels
            pointDotRadius: 4,
            //Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,
            //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,
            //Boolean - Whether to show a stroke for datasets
            datasetStroke: true,
            //Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,
            //Boolean - Whether to fill the dataset with a color
            datasetFill: true,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%=datasets[i].label%></li><%}%></ul>",
            //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true
        };

                        //Create the line chart
                        salesChart.Line(salesChartData, salesChartOptions);

        //---------------------------
        //- END MONTHLY SALES CHART -
        //---------------------------
    });
</script>
}